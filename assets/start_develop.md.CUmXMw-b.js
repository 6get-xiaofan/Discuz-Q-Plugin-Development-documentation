import{_ as e,c as s,o as a,a2 as i}from"./chunks/framework.DTU5Z1Qv.js";const n="/Discuz-Q-Plugin-Development-documentation/assets/develop-1.BucIrTm8.png",t="/Discuz-Q-Plugin-Development-documentation/assets/develop-2.C1BrHAYQ.png",p="/Discuz-Q-Plugin-Development-documentation/assets/develop-3.BQ2qXz2c.png",E=JSON.parse('{"title":"本地开发","description":"","frontmatter":{},"headers":[],"relativePath":"start/develop.md","filePath":"start/develop.md","lastUpdated":1711683272000}'),o={name:"start/develop.md"},l=i('<h1 id="本地开发" tabindex="-1">本地开发 <a class="header-anchor" href="#本地开发" aria-label="Permalink to &quot;本地开发&quot;">​</a></h1><p>因为小程序与web端的加载方式有比较大的区别，所以对于插件的开发有两种不同的方式进行调试。</p><h2 id="web端" tabindex="-1">web端 <a class="header-anchor" href="#web端" aria-label="Permalink to &quot;web端&quot;">​</a></h2><p>web端的开发会基于异步加载的方式进行本地开发调试，通过同时运行2个服务，进行本地开发调试，同时可以模拟插件通过异步的形式加载，还原真实的运行时情况。</p><h4 id="插件编译" tabindex="-1">插件编译 <a class="header-anchor" href="#插件编译" aria-label="Permalink to &quot;插件编译&quot;">​</a></h4><p>进入插件<code>View</code>目录下，运行<code>npm run server</code>命令。这时会监听插件代码变化，编译的代码会存放在内存当中。并且在插件运行server的时候，会在控制台输出一个<code>json</code>。</p><p><img src="'+n+'" alt="图片"></p><h4 id="web端编译" tabindex="-1">web端编译 <a class="header-anchor" href="#web端编译" aria-label="Permalink to &quot;web端编译&quot;">​</a></h4><p>进入你本地的小程序项目<code>discuz-fe</code>项目中的<code>web</code>目录，然后运行<code>npm run dev</code>。启动web端的本地开发。服务一般通过<code>http://0.0.0.0:9527</code>即可访问。</p><p>web端会有一个秘籍模式，通过在浏览器的<code>localStorage</code>中，添加一个<code>openPluginEnter</code>的key，值为<code>1</code>。然后刷新页面即可打开秘籍模式。</p><blockquote><p>v3.0.211104版本以上才有此功能。</p></blockquote><p><img src="'+t+'" alt="图片"></p><p>通过复制小程序插件编译时输出的在控制台中的配置文件，复制进文本框中，点击确定，如果没有任何问题，那么就会开始加载本地的插件代码查看效果。</p><p><img src="'+p+`" alt="图片"></p><h2 id="小程序" tabindex="-1">小程序 <a class="header-anchor" href="#小程序" aria-label="Permalink to &quot;小程序&quot;">​</a></h2><p>首先小程序插件无法像web端一样通过本地加载js的方式引入并生效，所以需要在编译前，需要将插件代码注入到项目代码中。</p><h4 id="插件编译-1" tabindex="-1">插件编译 <a class="header-anchor" href="#插件编译-1" aria-label="Permalink to &quot;插件编译&quot;">​</a></h4><p>进入插件<code>View</code>目录下，运行<code>npm run watch</code>命令。这时会监听插件代码变化，同步编译出代码输出到<code>View</code>目录下的<code>dist</code>中。</p><h4 id="小程序编译" tabindex="-1">小程序编译 <a class="header-anchor" href="#小程序编译" aria-label="Permalink to &quot;小程序编译&quot;">​</a></h4><p>进入你本地的小程序项目<code>discuz-fe</code>项目中的<code>mini</code>目录，然后改写一下package.json中的命令，添加上指向你开发插件的目录。为小程序构建添加<code>--plugin</code>参数。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 旧</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cross-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">development dzq dev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p mini </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--type weapp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 新</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cross-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">development dzq dev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p mini </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--type weapp --plugin /Users/lamho/Desktop/plugin</span></span></code></pre></div><blockquote><p>注意：--plugin指向的不是插件自身目录，而是存放插件集合的文件路径。</p></blockquote><div class="language-undefined vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">undefined</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>├── myPlugin</span></span>
<span class="line"><span>│   ├── pluginA</span></span>
<span class="line"><span>│   ├── pluginB</span></span>
<span class="line"><span>│   ├── ...</span></span></code></pre></div><p>传入的应该是<code>myPlugin</code>这个文件所在的目录。</p><blockquote><p><code>--plugin</code>指向的目录，在构建时导入插件的是插件的<code>src</code>目录中的源码进行构建。</p><p>v3.0.211111版本以上才有此功能。</p></blockquote>`,25),d=[l];function c(h,r,k,u,g,m){return a(),s("div",null,d)}const _=e(o,[["render",c]]);export{E as __pageData,_ as default};
