import{_ as s,c as a,o as i,a2 as e}from"./chunks/framework.DTU5Z1Qv.js";const n="/Discuz-Q-Plugin-Development-documentation/assets/be_start-1.CPlYlJid.png",E=JSON.parse('{"title":"插件接口开发","description":"","frontmatter":{},"headers":[],"relativePath":"apis/be_start.md","filePath":"apis/be_start.md","lastUpdated":1711683848000}'),t={name:"apis/be_start.md"},l=e(`<h1 id="插件接口开发" tabindex="-1">插件接口开发 <a class="header-anchor" href="#插件接口开发" aria-label="Permalink to &quot;插件接口开发&quot;">​</a></h1><h3 id="后端插件开发" tabindex="-1">后端插件开发 <a class="header-anchor" href="#后端插件开发" aria-label="Permalink to &quot;后端插件开发&quot;">​</a></h3><p>插件分成很多种类，如，发帖类型插件、广告插件、表情插件等，官方会持续增加更多的类型，每个插件类型都会在框架里预留对应的能力，其配置文件<code>config.json</code>也可能会有少许差异，具体到各种插件的开发差异需要参看后续推出的<strong>DZQ插件示例文档</strong>，同时，开发者也可以通过自定义接口的方式开发非特定类型的插件， 本指南指在阐述后端插件开发的基本流程。 以报名帖为例，开发者需要给自己的插件起一个唯一的英文名称 <code>name_en</code>且设置一个唯一的应用id <code>app_id</code> （官方开放插件市场以后，英文名称和app_id需要通过注册获取）。</p><h3 id="环境搭建" tabindex="-1">环境搭建 <a class="header-anchor" href="#环境搭建" aria-label="Permalink to &quot;环境搭建&quot;">​</a></h3><p>在开始开发您的Discuz! Q应用之前，需要安装一个可正常访问的站点，阅读 <strong><a href="https://doc.q.discuz.vip/guide/install-linux.html#nginx" target="_blank" rel="noreferrer">安装文档</a></strong> 依据步骤安装好站点环境。</p><h3 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h3><p>以下是每个Discuz !Q 3.0的服务器文件目录说明</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── app </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----------- 主业务逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── config </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-------- 项目配置文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">database</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> ------ 数据表迁移 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── framework </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----- 框架文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── plugin </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-------- 插件目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── public </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-------- 业务入口以及H5和Admin的客户端项目</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── resources </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----- 其他资源类</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── routes </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-------- 路由</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── storage </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">------- 本地文件及缓存文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── vendor </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-------- 依赖目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── disco </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--------- 控制台命令入口</span></span></code></pre></div><blockquote><p>plugin目录为插件存放目录，开发者或使用者可以通过存放<code>标准的</code>的插件文件到plugin目录下，插件会自动生效。</p></blockquote><p>注意：</p><ul><li>plugin目录下的插件文件名不能重复</li><li>前端插件热插拔正在开发中</li></ul><h3 id="智能合并" tabindex="-1">智能合并 <a class="header-anchor" href="#智能合并" aria-label="Permalink to &quot;智能合并&quot;">​</a></h3><p>当前<code>plugin</code>目录下存放着官方插件和自定义的插件，在每次更新版本时，更新脚本将会智能的合并覆盖<code>plugin</code>目录，如当前<code>plugin</code>目录下有<code>A</code>、<code>B</code>、<code>C</code>三个官方插件，开发中上传了<code>E</code>、<code>F</code>两个插件，这时<code>plugin</code>目录下会有<code>A</code>、<code>B</code>、<code>C</code>,<code>E</code>、<code>F</code>五个插件，这时进行版本升级，新安装包只会覆盖<code>A</code>、<code>B</code>、<code>C</code>三个官方插件，自己上传的插件不会被覆盖。</p><p><img src="`+n+'" alt="图片"></p><h3 id="插件唯一标识" tabindex="-1">插件唯一标识 <a class="header-anchor" href="#插件唯一标识" aria-label="Permalink to &quot;插件唯一标识&quot;">​</a></h3><p>以报名帖为例，开发者需要给自己的插件起一个唯一的英文名称 <code>name_en</code>且设置一个唯一的应用id <code>app_id</code> （官方开放插件市场以后，英文名称和app_id需要通过注册获取）。</p><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li>v3.0210926插件配置文件是config.php且不支持本指南中的路由配置方式，</li><li>在v3.0211014之后支持本指南的接口路由配置方式，且配置文件变更为JSON格式。</li></ul>',18),p=[l];function o(d,h,c,r,k,g){return i(),a("div",null,p)}const _=s(t,[["render",o]]);export{E as __pageData,_ as default};
