import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.CQ12TVIp.js";const e="/assets/import-1.Tnf21Zf2.png",u=JSON.parse('{"title":"插件载入","description":"","frontmatter":{},"headers":[],"relativePath":"start/import.md","filePath":"start/import.md","lastUpdated":1711682894000}'),p={name:"start/import.md"},t=n(`<h1 id="插件载入" tabindex="-1">插件载入 <a class="header-anchor" href="#插件载入" aria-label="Permalink to &quot;插件载入&quot;">​</a></h1><p>插件分为3种载入方式:</p><ul><li>内置插件</li><li>本地插件</li><li>远程插件</li></ul><p>不同的载入方式分别应用于不同的场景。</p><h2 id="内置插件" tabindex="-1">内置插件 <a class="header-anchor" href="#内置插件" aria-label="Permalink to &quot;内置插件&quot;">​</a></h2><p>适合官方内置插件或深度二开，插件代码内嵌在前端主题代码内，<code>@discuzq/cli</code>会默认读取前端仓库中的<code>common/plugin</code>下所有符合标准的插件，注入到构建产物中。如报名帖，商品贴均采用此开发方式。</p><p>参考报名帖和商品贴，就是属于内置插件。内置插件在构建时，会读取<code>src</code>目录下的源代码进行编译，因为内置插件会进入主流程进行编译，便于代码复用和体积优化等。</p><blockquote><p>如果你是开发者，可以使用内置插件进行开发，开发完毕后抽离出单独文件进行独立构建。</p></blockquote><h2 id="本地插件" tabindex="-1">本地插件 <a class="header-anchor" href="#本地插件" aria-label="Permalink to &quot;本地插件&quot;">​</a></h2><p>本地插件只适用于小程序，因为小程序无法实现远程加载代码，对于小程序端的插件开发不太友好，我们可以通过以下两种方式对小程序进行引用第三方插件。</p><h3 id="命令参数" tabindex="-1">命令参数 <a class="header-anchor" href="#命令参数" aria-label="Permalink to &quot;命令参数&quot;">​</a></h3><p>当<code>@discuzq/cli</code>版本大于<code>1.3.12</code>时，可以通过参数<code>-plugin</code>参数为小程序指定一个外部文件夹，在编译时，<code>@discuzq/cli</code>会将外部的插件导入到小程序的构建中，实现小程序插件插拔能力。</p><p>改造<code>mini/</code>目录下的<code>package.json</code>中的<code>build</code>命令</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 旧</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cross-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">production dzq build </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p mini </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--type weapp &amp;&amp; npm run dist</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 新</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cross-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">production dzq build </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p mini </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--type weapp --plugin &lt;你的文件目录&gt; &amp;&amp; npm run dist</span></span></code></pre></div><h3 id="小助手工具" tabindex="-1">小助手工具 <a class="header-anchor" href="#小助手工具" aria-label="Permalink to &quot;小助手工具&quot;">​</a></h3><p>使用小助手的<code>1.0.4</code>版本及以上，通过配置项目信息会寻找对应目录中的插件，调用命令参数导入插件，并进行编译。</p><h3 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意&quot;">​</a></h3><p>本地插件目录是一个多插件的集合目录，其中的包含关系如下：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── myPlugin </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">------------------ 插件目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   ├── pluginA </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">------ 插件A</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   |  ├── ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   |  ├── View</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   |  |  ├── src</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   |  |  ├── dist</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   |  |  ├── ....</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   |  └── </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">json</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> ----------- 插件基础配置文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   ├── pluginB </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">------ 插件B</span></span></code></pre></div><h2 id="远程插件" tabindex="-1">远程插件 <a class="header-anchor" href="#远程插件" aria-label="Permalink to &quot;远程插件&quot;">​</a></h2><p>远程插件是DZQ插件体系的一大亮点，给插件提供热插拔机制，站长通过在管理后台上传标准插件，并且成功安装后，通过Discuz !Q在web端的运行时会请求插件接口，获取当前已经安装的插件，并获取到插件的文件地址进行异步加载，加载完毕后会自动注册插件并用于相对应的钩子中。</p><p><img src="`+e+'" alt="图片"></p><p>通过在Discuz !Q 3.0的管理后台上传相应的插件，那么在页面运行时，会请求<code>/api/v3/plugin/list</code>的接口，获取当前安装的插件信息，然后系统会自动去加载并且实例化插件到对应内容区中进行展示。</p><p>远程插件读取的是编译后的插件代码，读取的是<code>View/dist</code>下的文件。需要通过<code>@discuzq/cli</code>的<code>dzq plugin publish</code>命令进行构建后的产物。</p>',24),l=[t];function h(d,o,c,k,r,E){return a(),i("div",null,l)}const m=s(p,[["render",h]]);export{u as __pageData,m as default};
