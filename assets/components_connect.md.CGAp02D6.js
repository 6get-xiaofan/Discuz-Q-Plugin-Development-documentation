import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.DTU5Z1Qv.js";const g=JSON.parse('{"title":"插件间通信","description":"","frontmatter":{},"headers":[],"relativePath":"components/connect.md","filePath":"components/connect.md","lastUpdated":1711684263000}'),h={name:"components/connect.md"},t=n(`<h1 id="插件间通信" tabindex="-1">插件间通信 <a class="header-anchor" href="#插件间通信" aria-label="Permalink to &quot;插件间通信&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>一个插件可能具有多个注入点（组件），可能注入了多个位置。譬如，可能注册了页面，也使用了发帖区域的钩子。</p><p>而由于它们之间可能存在互相的联动，譬如彼此数据相互关联、彼此之间的交互相关联，需要进行通信</p><p>出于架构稳定性的角度考虑，<code>Discuz! Q</code> 没有对插件暴露完整的数据存储 <code>store</code> ，故此我们不能直接通过修改业务中的 <code>store</code> 来完成交互</p><p>出于上述原因，我们提出以下几种通信的方案</p><h2 id="插件间通信-1" tabindex="-1">插件间通信 <a class="header-anchor" href="#插件间通信-1" aria-label="Permalink to &quot;插件间通信&quot;">​</a></h2><h3 id="通过共同的数据存储通信" tabindex="-1">通过共同的数据存储通信 <a class="header-anchor" href="#通过共同的数据存储通信" aria-label="Permalink to &quot;通过共同的数据存储通信&quot;">​</a></h3><blockquote><p>上文我们介绍了 <code>Discuz! Q</code> 中数据存储的方案，参见 <a href="./store.html">插件数据储存</a></p></blockquote><p>官方最为推崇的一种方案是，基于官方提供的数据存储 <code>store</code> ，来完成彼此之间的相互交流</p><p>以下为示例</p><p>例如注入到个人中心的 <code>AComponent</code> 与 注入到发帖页的 <code>BComponent</code> 需要通信，他们共同属于 <code>MyPlugin</code> 插件</p><p>那么 <code>AComponent</code> 可以通过如下方式，在 <code>MyPlugin</code> 对应的插件存储 <code>store</code> 中注入数据</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pluginAction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MyPlugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BComponent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\` 可以通过如下方式获取到这个 \`</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pluginAction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MyPlugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//here is a -&gt; 1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">console</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>BComponent</code> 获取这个数据可能会在多个生命周期，譬如初始化的 <code>componentDidMount</code>，甚至是渲染时的 <code>render</code>，让这个数据和界面渲染相互绑定</p><p><strong>这个方案可以规避由于多个页面处于不同的时期初始化和销毁导致出错的问题</strong></p><h3 id="通过事件机制通信" tabindex="-1">通过事件机制通信 <a class="header-anchor" href="#通过事件机制通信" aria-label="Permalink to &quot;通过事件机制通信&quot;">​</a></h3><p><strong>官方不推荐此类通信方案，原因如下：</strong></p><ol><li>使用事件机制时，需要非常关心页面的挂载与销毁时机，调用销毁后页面中的事件是无效的</li><li>小程序中，页面跳转(push)并不会销毁原页面堆栈，故原组件注册的事件还存在</li><li>如果不处理事件的销毁时机，可能会造成内存泄漏</li><li>通过注册事件的机制，在某种程度上属于违反了React推崇的自上而下的传递事件及参数的原则，可能会带来数据源混乱的情况</li></ol><p>综合上述考虑，暂时官方并不提供内置的事件机制去支持这种方式实现，但如果开发者<code>必须</code>需要这样的机制实现插件功能，可以通过社区的实现方案<a href="https://github.com/krasimir/EventBus" target="_blank" rel="noreferrer">https://github.com/krasimir/EventBus</a>。</p><p>在 <code>A</code> 组件中我们进行事件的注册</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  componentDidMount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    EventBus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;showMiniDialog&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.handleMiniDialogOpen);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    EventBus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;showPlatformDialog&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.handlePlatformDialogOpen);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 一定要记得销毁，否则会造成内存泄露</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  componentWillUnmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    EventBus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;showMiniDialog&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.handleMiniDialogOpen);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    EventBus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;showPlatformDialog&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.handlePlatformDialogOpen);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><p>在 <code>B</code> 组件中我们进行事件的派发</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  handleMiniShopItemClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    EventBus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;showMiniDialog&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  handlePlatformItemClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    EventBus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;showPlatformDialog&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span></code></pre></div><p>如果此时，<code>A</code> 注册的事件没有被销毁，且 <code>B</code> 与 <code>A</code> 共用同一个实例，那么就可以实现互相的通信</p>`,25),p=[t];function l(e,k,d,r,E,o){return a(),i("div",null,p)}const y=s(h,[["render",l]]);export{g as __pageData,y as default};
