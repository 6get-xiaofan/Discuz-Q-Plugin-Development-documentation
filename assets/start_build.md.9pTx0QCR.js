import{_ as a,c as e,o as i,a2 as l}from"./chunks/framework.DTU5Z1Qv.js";const _=JSON.parse('{"title":"插件构建","description":"","frontmatter":{},"headers":[],"relativePath":"start/build.md","filePath":"start/build.md","lastUpdated":1711684263000}'),t={name:"start/build.md"},r=l('<h1 id="插件构建" tabindex="-1">插件构建 <a class="header-anchor" href="#插件构建" aria-label="Permalink to &quot;插件构建&quot;">​</a></h1><p>通过<code>@discuzq/cli</code>输出化的项目，都会配有以下几个命令：</p><ul><li>watch</li><li>server</li><li>build</li><li>publish</li></ul><h3 id="watch-监听模式" tabindex="-1">watch（监听模式） <a class="header-anchor" href="#watch-监听模式" aria-label="Permalink to &quot;watch（监听模式）&quot;">​</a></h3><p>通过监听本地文件变化，自动重新编译代码，并输出到文件夹中。</p><h3 id="server-服务编译" tabindex="-1">server（服务编译） <a class="header-anchor" href="#server-服务编译" aria-label="Permalink to &quot;server（服务编译）&quot;">​</a></h3><p>与watch不同，监听变化及编译的内容只存在于内存中，并不会输出到文件目录。</p><h3 id="build" tabindex="-1">build <a class="header-anchor" href="#build" aria-label="Permalink to &quot;build&quot;">​</a></h3><p>打包构建与生产环境，基于src中的目录规范，进行构建压缩代码，输出生产环境的插件代码。</p><h3 id="publish" tabindex="-1">publish <a class="header-anchor" href="#publish" aria-label="Permalink to &quot;publish&quot;">​</a></h3><p>发布插件，基于build做了扩展，会将build命令输出的产物进行压缩，生产一个zip包，用于上传到管理系统中上传插件使用。</p><h2 id="构建规则" tabindex="-1">构建规则 <a class="header-anchor" href="#构建规则" aria-label="Permalink to &quot;构建规则&quot;">​</a></h2><p>插件的构建能力是通过<code>@discuzq/cli</code>提供的，构建时获取当前插件有以下的规则：</p><ul><li>插件根目录下需要有config.json文件</li><li>基于config.json文件中的view字段，循环查找插件名称并且在src目录下存在相应的文件</li><li>构建后输出到src同等目录下的dist目录，并且保持和src的目录结构一致</li></ul><p>输出后每个插件只保留1个js文件和1个css文件，如果需要使用图片等，需要自行转为base64格式嵌入到代码中，不支持图片引入编译。</p><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><p>构建产物以<code>umd</code>标准进行构建，代码运行后，将会在window作用域下的DZQPlugin对象中存储，其名称为view下的key。</p>',17),s=[r];function o(d,c,h,n,u,p){return i(),e("div",null,s)}const f=a(t,[["render",o]]);export{_ as __pageData,f as default};
