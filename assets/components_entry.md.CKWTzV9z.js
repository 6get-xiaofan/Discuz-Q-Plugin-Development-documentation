import{_ as t,c as s,o as i,a2 as a}from"./chunks/framework.CQ12TVIp.js";const c=JSON.parse('{"title":"插件主程序","description":"","frontmatter":{},"headers":[],"relativePath":"components/entry.md","filePath":"components/entry.md","lastUpdated":1711682894000}'),l={name:"components/entry.md"},n=a(`<h1 id="插件主程序" tabindex="-1">插件主程序 <a class="header-anchor" href="#插件主程序" aria-label="Permalink to &quot;插件主程序&quot;">​</a></h1><p>插件必须提供一个主程序的入口文件，是每个插件的入口。插件主程序文件，必须是一个类，并且必须包含以下静态参数。可参考以下示例：</p><p>以下是插件主入口的模板，Component必须指向<code>适配器</code>，由编译时决定返回那个段的样式组件。</p><p>main.js</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Component </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./adapter&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../../../config.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> YourPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pluginName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config.name_en </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 插件名称</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config.version </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 插件版本</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config.type; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 插件类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> appid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config.app_id; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// appid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> author</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config.author; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 作者</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config.view.YourPlugin.platform;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config.view.YourPlugin.target </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 插件使用目标</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> hookName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config.view.YourPlugin.hookName </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 钩子名称</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> component</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 需要渲染的组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 需要在注入时提供的额外数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">值类型</th><th style="text-align:left;">可用值</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">pluginName</td><td style="text-align:left;">String</td><td style="text-align:left;">自定义（不可重名）</td><td style="text-align:left;">插件名称</td></tr><tr><td style="text-align:left;">version</td><td style="text-align:left;">String</td><td style="text-align:left;">1.0.0</td><td style="text-align:left;">插件版本</td></tr><tr><td style="text-align:left;">type</td><td style="text-align:left;">String</td><td style="text-align:left;">0, 1, 2</td><td style="text-align:left;">插件类型</td></tr><tr><td style="text-align:left;">appid</td><td style="text-align:left;">String</td><td style="text-align:left;">自动生成</td><td style="text-align:left;">插件唯一标识</td></tr><tr><td style="text-align:left;">author</td><td style="text-align:left;">Object</td><td style="text-align:left;">参考脚手架生成</td><td style="text-align:left;">作者信息</td></tr><tr><td style="text-align:left;">hookName</td><td style="text-align:left;">String</td><td style="text-align:left;">参考hookName定义</td><td style="text-align:left;">钩子名称</td></tr><tr><td style="text-align:left;">platform</td><td style="text-align:left;">Array</td><td style="text-align:left;">&#39;h5&#39;,&#39;pc&#39;,&#39;mini&#39;</td><td style="text-align:left;">可用平台范围</td></tr><tr><td style="text-align:left;">component</td><td style="text-align:left;">ReactComponent</td><td style="text-align:left;">无</td><td style="text-align:left;">插件组件</td></tr><tr><td style="text-align:left;">path</td><td style="text-align:left;">String</td><td style="text-align:left;">自定义</td><td style="text-align:left;">页面插件必填</td></tr><tr><td style="text-align:left;">options</td><td style="text-align:left;">object</td><td style="text-align:left;">无</td><td style="text-align:left;">自定义传递进插件渲染时使用的数据</td></tr></tbody></table><blockquote><p>组件不支持<code>函数组件</code>，必须使用<code>class</code>编写组件。</p></blockquote>`,7),e=[n];function h(p,k,d,r,g,y){return i(),s("div",null,e)}const E=t(l,[["render",h]]);export{c as __pageData,E as default};
